<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>question</key>
		<string>Group multiple values into a single compound value. The values within it can be of any type and do not have to be of the same type as each other.</string>
		<key>answer1</key>
		<string>Class</string>
		<key>answer2</key>
		<string>Array</string>
		<key>answer3</key>
		<string>Tuple</string>
		<key>rightAnswer</key>
		<integer>3</integer>
    <key>rightAnswerMessage</key>
    <string>Tuple groups multiple values into a single compound value. The values within it can be of any type and do not have to be of the same type as each other.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>Constants are pieces of data that we want to reference, but that we know won&apos;t have a changing value. We use the_________keyword to declare them.</string>
		<key>answer1</key>
		<string>var</string>
		<key>answer2</key>
		<string>let</string>
		<key>answer3</key>
		<string>String</string>
		<key>rightAnswer</key>
		<integer>2</integer>
    <key>rightAnswerMessage</key>
    <string>Constants are pieces of data that we want to reference, but that we know won&apos;t have a changing value. We use the let keyword to declare them.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>This either contains a value or contains nil to indicate that a value is missing.</string>
		<key>answer1</key>
		<string>constant</string>
		<key>answer2</key>
		<string>variable</string>
		<key>answer3</key>
		<string>optional</string>
		<key>rightAnswer</key>
		<integer>3</integer>
    <key>rightAnswerMessage</key>
    <string>Optional either contains a value or contains nil to indicate that a value is missing.</string>
	</dict>
		<dict>
		<key>question</key>
		<string>var greeting = &apos;Hello World&apos; is an example of a </string>
		<key>answer1</key>
		<string>constant</string>
		<key>answer2</key>
		<string>explicit string type</string>
		<key>answer3</key>
		<string>inferred type string</string>
		<key>rightAnswer</key>
		<integer>3</integer>
    <key>rightAnswerMessage</key>
    <string>var greeting = &apos;Hello World&apos; is an example of an Inferred type string.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>To create an inmutable variable you need to use the keyword</string>
		<key>answer1</key>
		<string>constant</string>
		<key>answer2</key>
		<string>let</string>
		<key>answer3</key>
		<string>var</string>
		<key>rightAnswer</key>
		<integer>2</integer>
    <key>rightAnswerMessage</key>
    <string>To create an inmutable variable you need to use the keyword let</string>
	</dict>
	<dict>
		<key>question</key>
		<string>Swift uses this process to include the name of a constant or variable as a placeholder in a longer string, and to prompt Swift to replace it with the current value of that constant or variable.</string>
		<key>answer1</key>
		<string>String Interpolation</string>
		<key>answer2</key>
		<string>Concatenation</string>
		<key>answer3</key>
		<string>none of the above</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>Swift uses String Interpolation to include the name of a constant or variable as a placeholder in a longer string, and to prompt Swift to replace it with the current value of that constant or variable.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>Represents a 32-bit floating-point number and the precision of it can be as little as 6 decimal digits.</string>
		<key>answer1</key>
		<string>Float</string>
		<key>answer2</key>
		<string>Double</string>
		<key>answer3</key>
		<string>Integer</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>Float represents a 32-bit floating-point number and the precision of it can be as little as 6 decimal digits.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>Represents a 64-bit floating point number and has a precision of at least 15 decimal digits.</string>
		<key>answer1</key>
		<string>Double</string>
		<key>answer2</key>
		<string>Float</string>
		<key>answer3</key>
		<string>Integer</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>Double represents a 64-bit floating point number and has a precision of at least 15 decimal digits.</string>
	</dict>
    <dict>
		<key>question</key>
		<string>These are whole numbers with no fractional component, such as 42 and -23. They are either signed (positive, zero, or negative) or unsigned (positive or zero).</string>
		<key>answer1</key>
		<string>Float</string>
		<key>answer2</key>
		<string>Integers</string>
		<key>answer3</key>
		<string>Double</string>
		<key>rightAnswer</key>
		<integer>2</integer>
    <key>rightAnswerMessage</key>
    <string>Integers are whole numbers with no fractional component, such as 42 and -23. They are either signed (positive, zero, or negative) or unsigned (positive or zero).</string>
	</dict>
	<dict>
		<key>question</key>
		<string>These are numbers with a fractional part like 3.7 or -15094.4 In addition to that, this type of numbers can store very large number that don&apos;t fit in an Int</string>
		<key>answer1</key>
		<string>Integer</string>
		<key>answer2</key>
		<string>Bool</string>
		<key>answer3</key>
		<string>Floating Point Numbers</string>
		<key>rightAnswer</key>
		<integer>3</integer>
    <key>rightAnswerMessage</key>
    <string>Floating Point Numbers or Float are numbers with a fractional part like 3.7 or -15094.4 In addition to that, this type of numbers can store very large number that don&apos;t fit in an Int</string>
	</dict>
	<dict>
		<key>question</key>
		<string>It has a size of 64 bits, is recommended to use it for very large or very accurate numbers.</string>
		<key>answer1</key>
		<string>Float</string>
		<key>answer2</key>
		<string>Int</string>
		<key>answer3</key>
		<string>Double</string>
		<key>rightAnswer</key>
		<integer>3</integer>
    <key>rightAnswerMessage</key>
    <string>Double has a size of 64 bits is recommended to use it for very large or very accurate numbers</string>
	</dict>
	<dict>
		<key>question</key>
		<string>An int literal can be written as decimal, binary, octal and:</string>
		<key>answer1</key>
		<string>Int32</string>
		<key>answer2</key>
		<string>Hexadecimal</string>
		<key>answer3</key>
		<string>Bool</string>
		<key>rightAnswer</key>
		<integer>2</integer>
    <key>rightAnswerMessage</key>
    <string>An int literal can be written as decimal, binary, octal and Hexadecimal</string>
	</dict>
	<dict>
		<key>question</key>
		<string>Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms. These integers follow a naming convention similar to C, in that an 8-bit unsigned integer is of type ______, and a 32-bit signed integer is of type ______.</string>
		<key>answer1</key>
		<string>UInt8 and Int32</string>
		<key>answer2</key>
		<string>Int32bit and Int64bit</string>
		<key>answer3</key>
		<string>Float and Double</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>Swift provides signed and unsigned integers in 8, 16, 32, and 64 bit forms. These integers follow a naming convention similar to C, in that an 8-bit unsigned integer is of type UInt8, and a 32-bit signed integer is of type Int32.</string>
	</dict>
  <dict>
    <key>question</key>
    <string>Swift provides an additional integer type, Int. Which has the same size as the current platform’s native word size</string>
    <key>answer1</key>
    <string>UInt8</string>
    <key>answer2</key>
    <string>Int64bit</string>
    <key>answer3</key>
    <string>Int</string>
    <key>rightAnswer</key>
    <integer>3</integer>
    <key>rightAnswerMessage</key>
    <string>Swift provides an additional integer type, Int, which has the same size as the current platform’s native word size</string>
  </dict>
	<dict>
		<key>question</key>
		<string>It is a collection of data items which can be accessed via an index beginning with 0.</string>
		<key>answer1</key>
		<string>Array</string>
		<key>answer2</key>
		<string>if statements</string>
		<key>answer3</key>
		<string>Strings</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>It is a collection of data items which can be accessed via an index beginning with 0.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>It is a collection type that stores values of the same type in an ordered list. The same value can appear in it multiple times at different positions.</string>
		<key>answer1</key>
		<string>Array</string>
		<key>answer2</key>
		<string>String</string>
		<key>answer3</key>
		<string>Bool</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>Tuple</string>
	</dict>
	<dict>
		<key>question</key>
		<string>To add another item to our todo array we use the operator:</string>
		<key>answer1</key>
		<string>+=</string>
		<key>answer2</key>
		<string>++</string>
		<key>answer3</key>
		<string>==</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>To add another item to our todo array we use the operator: +=</string>
	</dict>
		<dict>
		<key>question</key>
		<string>This collection type allows you to store key-value pairs and access the value by providing the key.</string>
		<key>answer1</key>
		<string>Dictionary</string>
		<key>answer2</key>
		<string>Tuple</string>
		<key>answer3</key>
		<string>Array</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>Dictionary is a collection type that allows you to store key-value pairs and access the value by providing the key.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>Loop which ensures that your block of code is executed at least once.</string>
		<key>answer1</key>
		<string>While Loop</string>
		<key>answer2</key>
		<string>Do-While Loop</string>
		<key>answer3</key>
		<string>For Loop</string>
		<key>rightAnswer</key>
		<integer>2</integer>
    <key>rightAnswerMessage</key>
    <string>Do-While Loop ensures that your block of code is executed at least once.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>Loop which states while something is true execute a block of code. It stops execution when that condition turns to false.</string>
		<key>answer1</key>
		<string>Do-While Loop</string>
		<key>answer2</key>
		<string>For Loop</string>
		<key>answer3</key>
		<string>While Loop</string>
		<key>rightAnswer</key>
		<integer>3</integer>
    <key>rightAnswerMessage</key>
    <string>While Loop states that while something is true execute a block of code. It stops execution when that condition turns to false.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>Loop variant where it creates a temporary variable and assigns it a value while iterating over the array.</string>
		<key>answer1</key>
		<string>While Loop</string>
		<key>answer2</key>
		<string>For Loop</string>
		<key>answer3</key>
		<string>For-In</string>
		<key>rightAnswer</key>
		<integer>3</integer>
    <key>rightAnswerMessage</key>
    <string>For-In Loop creates a temporary variable and assigns it a value while iterating over the array.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>1…10 – is a range of numbers from 1 to 10. The three dots are known as a _____ range because the upper limit is inclusive.</string>
		<key>answer1</key>
		<string>Closed</string>
		<key>answer2</key>
		<string>Half-Closed</string>
		<key>answer3</key>
		<string>Explicit</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>1…10 – is a range of numbers from 1 to 10. The three dots are known as a Closed range because the upper limit is inclusive.</string>
	</dict>
	<dict>
		<key>question</key>
		<string>1..&lt;10 – is a range of numbers from 1 to 9. The two dots with a lesser-than sign is known as a ______ range because the upper limit is non-inclusive.</string>
		<key>answer1</key>
		<string>Half-Closed</string>
		<key>answer2</key>
		<string>Closed</string>
		<key>answer3</key>
		<string>Explicit</string>
		<key>rightAnswer</key>
		<integer>1</integer>
    <key>rightAnswerMessage</key>
    <string>1..&lt;10 – is a range of numbers from 1 to 9. The two dots with a lesser-than sign is known as a Half-Closed range because the upper limit is non-inclusive.</string>
	</dict>
</array>
</plist>
